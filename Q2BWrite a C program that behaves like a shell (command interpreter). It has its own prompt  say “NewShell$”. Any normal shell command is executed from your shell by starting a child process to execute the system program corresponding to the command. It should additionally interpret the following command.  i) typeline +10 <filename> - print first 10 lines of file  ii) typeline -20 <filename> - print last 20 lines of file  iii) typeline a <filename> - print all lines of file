#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<sys/wait.h>
#include<dirent.h>

#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>

void separate_tokens(char *cmd,char *tok[])
{
int i=0;
char *p;
p=strtok(cmd," ");
puts(p);
while(p!=NULL)
{
tok[i++]=p;
p=strtok(NULL," ");
}
tok[i]=NULL;
}
void typeline(char *fileName,char* count)
{
int handle,n,i=0,cnt=0;
char ch;
if((handle=open(fileName,O_RDONLY))==-1)
{
printf("\n\file %s notfound\n",fileName);
return;
}
if(strcmp(count,"a")==0)
{
while((read(handle,&ch,1)!=0))
printf("%c",ch);
close(handle);
return;
}
n=atoi(count);
if(n>0)
{
while((read(handle,&ch,1)!=0))
{
if(ch=='\n') i++;
if(i==n) break;
printf("%c",ch);
}
printf("\n");
close(handle);
return;
}
if(n<0)

{
while((read(handle,&ch,1)!=0))
if(ch=='\n') cnt++;
lseek(handle,0,SEEK_SET);
while((read(handle,&ch,1)!=0))
{
if(ch=='\n') i++;
if(i==(cnt+n))
break;

}
while((read(handle,&ch,1)!=0))
printf("%c",ch);
printf("\n");
close(handle);
return;
}
}
int main()
{
char cmd[80],*args[10];
int pid;
system("clear");
do
{
printf("\nNewShell$ ");
fgets(cmd,80,stdin);
cmd[strlen(cmd)-1]='\0';
separate_tokens(cmd,args);
if(strcmp(args[0],"typeline")==0)
typeline(args[2],args[1]);
else
{
pid = fork();
if(pid > 0)
wait(0);
else if(execvp(args[0],args)==-1)
printf("\n Command %s not found\n",args[0]);

}
}while(1);
return 0;
}

OR

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void make_toks(char *s, char *tok[])
{
int i=0;
char *p;
p = strtok(s," ");
while(p!=NULL) 
{
  tok[i++]=p;
  p=strtok(NULL," ");
  }
  tok[i]=NULL;
  }
  void typeline(char *fn, char *op)
  {
  int fh,i,j,n;
  char c;
  fh = open(fn,O_RDONLY);
  if(fh==-1)
  {
  printf("File %s not found.\n",fn);
  return;
  }
  if(strcmp(op,"a")==0)
  {
  while(read(fh,&c,1)>0)
  printf("%c",c);
  close(fh);
  return;
  }
  n = atoi(op);
  if(n>0)
  {
  i=0;
  while(read(fh,&c,1)>0)
  {
  printf("%c",c);
  if(c=='\n') i++;
  if(i==n) break;
  }
  }
  if(n<0)
  {
  i=0;
  while(read(fh,&c,1)>0)
  {
  if(c=='\n') i++;
  }
  lseek(fh,0,SEEK_SET);
  j=0;
  while(read(fh,&c,1)>0)
  {
  if(c=='\n')
  j++;
  if(j==i+n) break;
  }
  while(read(fh,&c,1)>0)
  {
  printf("%c",c);
  }
  }
  close(fh);
  }
  int main()
  {
  char buff[80],*args[10];
  int pid;
  while(1)
  {
  printf("\nNewShell$ ");
  fflush(stdin);
  fgets(buff,80,stdin);
  buff[strlen(buff)-1]='\0';
  make_toks(buff,args);
  if(strcmp(args[0],"typeline")==0)
  typeline(args[2],args[1]);
  else
  {
  pid = fork();
  if(pid>0)
  wait();
  else
  {
  if(execvp(args[0],args)==-1)
  printf("Bad command.\n");
  }
  }
  }
  return 0;
  }
